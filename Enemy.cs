using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework;

namespace T1_SE_SpaceInvaders
{
    class Enemy : GameObject2D
    {
        // The time it takes for the enemy to make a move
        float movementTime;
        float elapsedMovementTime;

        // The time it takes for the enemy to shoot
        float shootTime;
        float elapsedShootTime;

        // A variable to determine when the enemy has shoot
        bool hasShoot = false;
        public bool HasShoot
        {
            get { return hasShoot && this.IsAlive; }
            set { hasShoot = value; }
        }

        // The speed of this enemy shots
        int shotSpeed;
        public int ShotSpeed { get { return shotSpeed; } }

        // A Random number generator
        Random rnd = new Random();

        /// <summary>
        /// Creates an Enemy object
        /// </summary>
        /// <param name="texture">
        /// The object's texture
        /// </param>
        /// <param name="position">
        /// The 2D position of the object on the game screen
        /// </param>
        /// <param name="speed">
        /// The speed of the object
        /// </param>
        /// <param name="movementTime">
        /// The time it takes for the enemy to make a move
        /// </param>
        /// <param name="shootTime">
        /// The time it takes for the enemy to shoot
        /// </param>
        /// <param name="shotSpeed">
        /// The speed of this enemy shots
        /// </param>
        public Enemy(Texture2D texture, Vector2 position, int speed, float movementTime, float shootTime, int shotSpeed) :
            base(texture, position, speed)
        {
            this.movementTime = movementTime;
            this.shootTime = shootTime;
            this.shotSpeed = shotSpeed;
        }

        public override void Update(float fromLastUpdateTillNow)
        {
            elapsedMovementTime += fromLastUpdateTillNow;
            elapsedShootTime += fromLastUpdateTillNow;

            if (elapsedMovementTime > movementTime)
            {
                Array values = Enum.GetValues(typeof(Direction));
                Move((Direction)values.GetValue(rnd.Next(values.Length)));

                elapsedMovementTime = 0.0f;
            }

            if (elapsedShootTime > shootTime)
            {
                hasShoot = true;

                elapsedShootTime = 0.0f;
            }
        }

        public override void OnCollision(GameObject2D other)
        {
            if (other is Shot)
            {
                if ((other as Shot).WasGeneratedBy == Shot.ShotType.Player)
                {
                    // TODO play sound
                    this.Destroy();
                }
            }
        }

        /// <summary>
        /// Helper method used to return the position of the shots generated by this ship
        /// </summary>
        /// <returns></returns>
        public Vector2 GetShotPosition()
        {
            return new Vector2(this.Position.X + 44, this.Position.Y + this.Texture.Height + 1);
        }

        /// <summary>
        /// This method is responsible for handling the movements of the enemy
        /// </summary>
        /// <param name="direction"></param>
        public void Move(Direction direction)
        {
            if (direction == Direction.LEFT)
            {
                if (this.position.X - this.speed > 0) this.position.X -= this.speed;
            }
            else if (direction == Direction.RIGHT)
            {
                if (this.position.X + this.speed + this.texture.Width < 1024) this.position.X += this.speed;
            }
            else if (direction == Direction.DOWN)
            {
                this.position.Y += this.speed;

                if (this.position.Y > 768) this.Destroy();
            }
        }
    }
}
